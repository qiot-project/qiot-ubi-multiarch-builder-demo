name: Nightly Build (from Develop branch)

on:
  workflow_dispatch:

  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 0 * * *'
  
  push:
    paths-ignore:
      - .github/workflows/**
      - .gitignore
      - build.sh
      - build-aarch64.sh
      - build-jvm.sh
      - LICENSE
      - mvnw
      - mvnw.cmd
      - README.md
      - release.sh
    branches:
      - main
      - develop

jobs:

  define-variables:
    runs-on: ubuntu-latest
    outputs:
      image-version: ${{ steps.step2.outputs.image-version }}
      image-name: ${{ steps.step4.outputs.image-name }}
      docker-repo: ${{ steps.step4.outputs.docker-repo }}
      jvm-mode: ${{ steps.step4.outputs.jvm-mode }}
      native-mode: ${{ steps.step4.outputs.native-mode }}
      x86: ${{ steps.step4.outputs.x86 }}
      aarch64: ${{ steps.step4.outputs.aarch64 }}
    steps:
      - id: step1
        name: Checkout project
        uses: actions/checkout@v3
      - id: step2
        name: Output project version
        run: |
          echo "::set-output name=image-version::$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      - id: step3
        name: Load environment variables from .env files 
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: variables.env
      - id: step4
        name: Output imported environment variables
        shell: bash
        run: |
          echo "::set-output name=image-name::${CONTAINER_IMAGE_NAME}"
          echo "::set-output name=docker-repo::${DOCKER_REPO}"
          echo "::set-output name=jvm-mode::${JVM_MODE}"
          echo "::set-output name=native-mode::${NATIVE_MODE}"
          echo "::set-output name=x86::${X86}"
          echo "::set-output name=aarch64::${AARCH64}"

  call-nightly-build-native-aarch64:
    needs: define-variables
    #if: needs.define-variables.outputs.aarch64 && needs.define-variables.outputs.native-mode
#    environment: development
    uses: ./.github/workflows/reusable-snapshot-aarch64.yml
    # To pass named inputs to a called workflow, use the "with" keyword in a job.
    with:
      CONTAINER_IMAGE_NAME: ${{needs.define-variables.outputs.image-name}}
      CONTAINER_IMAGE_VERSION: ${{needs.define-variables.outputs.image-version}}
      DOCKER_REPO: ${{needs.define-variables.outputs.docker-repo}}
#      JVM_MODE: ${{needs.define-variables.outputs.jvm-mode}}
      NATIVE_MODE: ${{needs.define-variables.outputs.native-mode}}
#      X86: ${{needs.define-variables.outputs.x86}}
      AARCH64: ${{needs.define-variables.outputs.aarch64}}
    # Use the "secrets" keyword to pass named secrets.
    secrets:
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
      QUAY_USERNAME: ${{ secrets.QUAY_ALL_USERNAME }}
      QUAY_PASSWORD: ${{ secrets.QUAY_ALL_PASSWORD }}
    # Workflows that call reusable workflows in the same organization or enterprise
    #  can use the "inherit" keyword to implicitly pass the secrets.
      # secrets: inherit
      