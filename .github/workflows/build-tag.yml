name: Build container image on release created

on:
  workflow_dispatch:

  push:
    tags:
      - '*'

jobs:
  define-variables:
    runs-on: ubuntu-latest
    outputs:
      image-version: ${{ steps.step2.outputs.image-version }}
      image-version: ${{ steps.step2.outputs.image-version }}
      image-name: ${{ steps.step4.outputs.image-name }}
      docker-repo: ${{ steps.step4.outputs.docker-repo }}
      jvm-x86: ${{ steps.step4.outputs.jvm-x86 }}
      jvm-aarch64: ${{ steps.step4.outputs.jvm-aarch64 }}
      native-x86: ${{ steps.step4.outputs.native-x86 }}
      native-aarch64: ${{ steps.step4.outputs.native-aarch64 }}
    steps:
      - id: step1
        name: Checkout project
        uses: actions/checkout@v3
      - id: step2
        name: Set image tag version
        run: echo "::set-output name=image-version::${GITHUB_REF##refs/tags/v}"
      - id: step3
        name: Load environment variables from .env files 
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: variables.env
      - id: step4
        name: Output imported environment variables
        shell: bash
        run: |
          echo "::set-output name=image-name::${CONTAINER_IMAGE_NAME}"
          echo "::set-output name=docker-repo::${DOCKER_REPO}"
          echo "::set-output name=jvm-x86::${JVM_X86}"
          echo "::set-output name=jvm-aarch64::${JVM_AARCH64}"
          echo "::set-output name=native-x86::${NATIVE_X86}"
          echo "::set-output name=native-aarch64::${NATIVE_AARCH64}"
          
          
          
          
          
  call-build-tag-native:
    needs: define-variables
    if: |
       needs.define-variables.outputs.native-x86 == 'true'
    uses: ./.github/workflows/reusable-snapshot-native.yml
    # To pass named inputs to a called workflow, use the "with" keyword in a job.
    # with:
    # Use the "secrets" keyword to pass named secrets.
    secrets:
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
      QUAY_USERNAME: ${{ secrets.QUAY_ALL_USERNAME }}
      QUAY_PASSWORD: ${{ secrets.QUAY_ALL_PASSWORD }}
    # Workflows that call reusable workflows in the same organization or enterprise
    #  can use the "inherit" keyword to implicitly pass the secrets.
      # secrets: inherit
          
          
          
          
          
  call-build-tag-native-aarch64:
    needs: define-variables
    if: |
       needs.define-variables.outputs.native-aarch64 == 'true'
    uses: ./.github/workflows/reusable-snapshot-native-aarch64.yml
    # To pass named inputs to a called workflow, use the "with" keyword in a job.
    with:
      CONTAINER_IMAGE_NAME: ${{needs.define-variables.outputs.image-name}}
      CONTAINER_IMAGE_VERSION: ${{needs.define-variables.outputs.image-version}}
      DOCKER_REPO: ${{needs.define-variables.outputs.docker-repo}}
    # Use the "secrets" keyword to pass named secrets.
    secrets:
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
      QUAY_USERNAME: ${{ secrets.QUAY_ALL_USERNAME }}
      QUAY_PASSWORD: ${{ secrets.QUAY_ALL_PASSWORD }}
    # Workflows that call reusable workflows in the same organization or enterprise
    #  can use the "inherit" keyword to implicitly pass the secrets.
      # secrets: inherit
          
          
          
          
          
  call-build-tag-jvm:
    needs: define-variables
    if: |
       needs.define-variables.outputs.jvm-x86 == 'true'
    uses: ./.github/workflows/reusable-snapshot-jvm.yml
    # To pass named inputs to a called workflow, use the "with" keyword in a job.
    # with:
    # Use the "secrets" keyword to pass named secrets.
    secrets:
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
      QUAY_USERNAME: ${{ secrets.QUAY_ALL_USERNAME }}
      QUAY_PASSWORD: ${{ secrets.QUAY_ALL_PASSWORD }}
    # Workflows that call reusable workflows in the same organization or enterprise
    #  can use the "inherit" keyword to implicitly pass the secrets.
      # secrets: inherit
